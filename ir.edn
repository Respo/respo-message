{:package "respo-message",
 :root {:ns "main", :def "main!"},
 :files {"comp.container" {:ns ["ns"
                                "respo-message.comp.container"
                                [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div" "span" "<>"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]]],
                           :defs {"on-add" ["defn" "on-add" ["e" "dispatch!"] ["dispatch!" ":message/add" "nil"]],
                                  "comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["store"]
                                                    ["div"
                                                     ["{}" [":style" ["merge" "ui/global" ["{}" [":padding" "16"]]]]]
                                                     ["div"
                                                      ["{}"
                                                       [":style" "ui/button"]
                                                       [":event" ["{}" [":click" "on-add"]]]]
                                                      ["<>" "span" "|add message" "nil"]]
                                                     ["comp-msg-list" [":messages" "store"] ":notification/remove"]]]},
                           :procs []},
         "render" {:ns ["ns"
                        "respo-message.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "respo-message.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "respo-message.schema" ":as" "schema"]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Message"]
                                        [":icon" "|http://logo.mvc-works.org/mvc.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}" [":styles" ["[]"]] [":scripts" ["[]" "|/main.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" ["make-string" ["comp-container" "schema/store"]]]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]" ["aget" "manifest" "|vendor.js"] ["aget" "manifest" "|main.js"]]]]]]]]},
                   :procs []},
         "main" {:ns ["ns"
                      "respo-message.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "realize-ssr!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "respo.util.format" ":refer" ["[]" "mute-element"]]
                       ["[]" "respo-message.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "respo-message.updater" ":refer" ["[]" "add-one" "remove-one"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "respo-message.schema" ":as" "schema"]]],
                 :defs {"ssr?" ["def" "ssr?" ["some?" [".querySelector" "js/document" "|meta.respo-app"]]],
                        "id!" ["defn" "id!" [] ["swap!" "*id" "inc"] "@*id"],
                        "dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["println" "|dispatch!" "op" "op-data"]
                                     ["let"
                                      [["op-id" ["id!"]]
                                       ["new-store"
                                        ["case"
                                         "op"
                                         [":states" ["update" "@*store" ":states" ["mutate" "op-data"]]]
                                         [":message/add"
                                          ["add-one"
                                           "@*store"
                                           "op"
                                           ["{}"
                                            [":id" "op-id"]
                                            [":text" ["rand-nth" "words"]]
                                            [":kind" ["rand-nth" "kinds"]]]]]
                                         [":notification/remove" ["remove-one" "@*store" "op" "op-data"]]
                                         "@*store"]]]
                                      ["reset!" "*store" "new-store"]]],
                        "*store" ["defonce" "*store" ["atom" "schema/store"]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["enable-console-print!"]
                                 ["if" "ssr?" ["render-app!" "realize-ssr!"]]
                                 ["render-app!" "render!"]
                                 ["add-watch" "*store" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["js/setTimeout" ["fn" [] ["dispatch!" ":message/add" "nil"]]]
                                 ["println" "|app started!"]],
                        "*states" ["defonce" "*states" ["atom" ["{}"]]],
                        "words" ["def"
                                 "words"
                                 ["[]"
                                  "|just demo"
                                  "|Oh, this is strange"
                                  "|why do I have to do that? it's huge!"
                                  "|OK"
                                  "|wrong"
                                  "|find"]],
                        "kinds" ["def" "kinds" ["[]" ":attractive" ":irreversible" ":attentive" ":warn" ":verdant"]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       ["renderer"]
                                       ["renderer" "mount-target" ["comp-container" "@*store"] "dispatch!"]],
                        "reload!" ["defn"
                                   "reload!"
                                   []
                                   ["clear-cache!"]
                                   ["render-app!" "render!"]
                                   ["println" "|Code update."]
                                   ["dispatch!" ":message/add" "nil"]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]],
                        "*id" ["defonce" "*id" ["atom" "0"]]},
                 :procs [["set!" [".-onload" "js/window"] "main!"]]},
         "comp.message" {:ns ["ns"
                              "respo-message.comp.message"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div" "<>" "span"]]]
                              [":require"
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]]],
                         :defs {"on-remove" ["defn"
                                             "on-remove"
                                             ["idx" "op-remove"]
                                             ["fn"
                                              ["e" "dispatch!"]
                                              ["dispatch!"
                                               ["if" ["some?" "op-remove"] "op-remove" ":message/remove"]
                                               "idx"]]],
                                "comp-message" ["defcomp"
                                                "comp-message"
                                                ["idx" "message" "op-remove"]
                                                ["if"
                                                 ["some?" "message"]
                                                 ["div"
                                                  ["{}"
                                                   [":style"
                                                    ["merge"
                                                     "style-message"
                                                     ["{}"
                                                      [":transform" ["str" "|translate(0," ["*" "idx" "40"] "|px)"]]
                                                      [":background-color"
                                                       ["case"
                                                        [":kind" "message"]
                                                        [":attactive" "colors/attractive"]
                                                        [":irreversible" "colors/irreversible"]
                                                        [":attentive" "colors/attentive"]
                                                        [":verdant" "colors/verdant"]
                                                        [":warm" "colors/warm"]
                                                        "colors/attractive"]]]]]
                                                   [":event" ["{}" [":click" ["on-remove" "idx" "op-remove"]]]]]
                                                  ["<>" "span" [":text" "message"] "nil"]]
                                                 ["div"
                                                  ["{}"
                                                   [":style"
                                                    ["merge"
                                                     "style-message"
                                                     "style-zero"
                                                     ["{}"
                                                      [":transform"
                                                       ["str" "|translate(-120px," ["*" "idx" "40"] "|px)"]]]]]]]]],
                                "style-message" ["def"
                                                 "style-message"
                                                 ["{}"
                                                  [":position" ":absolute"]
                                                  [":top" "8"]
                                                  [":right" "8"]
                                                  [":height" "32"]
                                                  [":line-height" "|32px"]
                                                  [":font-size" "|14"]
                                                  [":background-color" ":transparent"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 16px"]
                                                  [":min-width" "64"]
                                                  [":text-align" ":left"]
                                                  [":overflow" ":hidden"]
                                                  [":text-overflow" ":ellipsis"]
                                                  [":max-width" "320"]
                                                  [":cursor" ":pointer"]
                                                  [":transition-duration" "|400ms"]]],
                                "style-zero" ["def" "style-zero" ["{}" [":pointer-events" ":none"]]]},
                         :procs []},
         "comp.msg-list" {:ns ["ns"
                               "respo-message.comp.msg-list"
                               [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "div" "span" "<>"]]]
                               [":require"
                                ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                ["[]" "respo-message.comp.message" ":refer" ["[]" "comp-message"]]]],
                          :defs {"comp-msg-list" ["defcomp"
                                                  "comp-msg-list"
                                                  ["messages" "op-remove"]
                                                  ["div"
                                                   ["{}"]
                                                   ["let"
                                                    [["view-messages" ["conj" "messages" "nil" "nil" "nil"]]]
                                                    ["->>"
                                                     "view-messages"
                                                     ["map-indexed"
                                                      ["fn"
                                                       ["idx" "message"]
                                                       ["[]" "idx" ["comp-message" "idx" "message" "op-remove"]]]]]]]]},
                          :procs []},
         "updater" {:ns ["ns" "respo-message.updater"],
                    :defs {"remove-one" ["defn"
                                         "remove-one"
                                         ["store" "op" "op-data"]
                                         ["update"
                                          "store"
                                          ":messages"
                                          ["fn" ["messages"] ["subvec" "messages" "0" "op-data"]]]],
                           "add-one" ["defn"
                                      "add-one"
                                      ["store" "op" "op-data"]
                                      ["update" "store" ":messages" ["fn" ["messages"] ["conj" "messages" "op-data"]]]]},
                    :procs []},
         "schema" {:ns ["ns" "respo-message.schema"],
                   :defs {"store" ["def" "store" ["{}" [":messages" ["[]"]] [":states" ["{}"]]]]},
                   :procs []}}}
